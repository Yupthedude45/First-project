# -*- coding: utf-8 -*-
"""Python_workbook2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LOZ4K1AF_wjdotx9jRk3XmYGUwnOZZ1Q
"""

import math

numbers = [5, 7, 11]

total = 0
for n in numbers:
    total += math.factorial(n)
print(total)

def double(number):
    result = number * 2
    return result

double(16)

import math
def factorial_sum(numbers):
    total = 0
    for n in numbers:
        total += math.factorial(n)
    return total

!pip install matplotlib-venn

!apt-get -qq install -y libfluidsynth1

from my_module import factorial_sum
factorial_sum([5, 7, 11])

#!/usr/bin/env python3

""" This script computes the sum of the factorial of a
list of numbers"""

import math
math.exp(2)

from math import exp
exp(2)

from math import *
exp(2)

"""
This script prints the current system date.
"""

import datetime

print(datetime.date.today())

result = 0
for n in range(1, 11):
# Recall that this loops through 1 to 10, not including 11
    result += n
print(result)

result = 0
for n in range(1, 11):
# Recall that this loops through 1 to 10, not including 11
    result += n
if __name__ == '__main__':
    print(result)

"""
This script will be used to show current date and time
"""

from datetime import datetime

local=datetime.now()
print("Local:" , local.strftime("%m/%d/%Y, %I:%M:%S"))

l = [4, 2, 7, 3]

maximum =0
for number in l:
    if number > maximum:
        maximum = number

l = [5, 8, 1, 3, 2]

still_swapping = True

while still_swapping:
    still_swapping = False
    for i in range(len(l) - 1):
        if l[i] > l[i+1]:
            l[i], l[i+1] = l[i+1], l[i]
            still_swapping = True

l

l = [5, 8, 1, 3, 2]

search_for = 8

result = -1

for i in range(len(l)):
    if search_for == l[i]:
        result = i
        break
print(result)

l = [2, 3, 5, 8, 11, 12, 18]

search_for = 11

slice_start = 0
slice_end = len(l) - 1

found= False

while slice_start <= slice_end and not found:
    location = (slice_start + slice_end) // 2
    if l[location] == search_for:
        found = True
    else:
        if search_for < l[location]:
            slice_end = location - 1
        else:
            slice_start = location + 1

print(found)
print(location)

def area(base, height):
    return base*height
area(2, 3)

def get_second_element(mylist):
    if len(mylist) > 1:
        return mylist[1]
    else:
        return 'List was too small'

get_second_element([1, 2, 3])

get_second_element([1])

def list_product(my_list):
    result = 1
    for number in my_list:
        result = result * number
    return result
print(list_product([2, 3]))
print(list_product([2, 10, 15]))

list_product([-1, 2, 3])

def area(x, y):
    return x*y

from datetime import datetime
def get_the_time():
    return datetime.datetime.now()

print(get_the_time)

def add_suffix(suffix='.com'):
    return 'google' + suffix

add_suffix()

add_suffix('.co.uk')

def convert_usd_to_aud(amount, rate=0.75):
    return amount / rate

convert_usd_to_aud(100)

convert_usd_to_aud(100, rate=0.78)

def convert_usd_to_aud(amount, rate=0.75):
    return amount / rate

def convert_and_sum_list(usd_list, rate=0.75):
    total = 0
    for amount in usd_list:
        total += convert_usd_to_aud(amount, rate=rate)
    return total
print(convert_and_sum_list([1, 3]))

def convert_and_sum_list_kwargs(usd_list, **kwargs):
    total = 0
    for amount in usd_list:
        total += convert_usd_to_aud(amount, **kwargs)
    return total
print(convert_and_sum_list_kwargs([1, 3], rate=0.8))

for i in range(5):
    print(i)

def sum_first_n(n):
    result = 0
    for i in range(n):
        result += i + 1
    return result

sum_first_n(100)

def is_prime(x):
    for i in range(2, x):
      if (x % i) == 0:
        return False
        return True

is_prime(7)

is_prime(1000)

def print_the_next_number(start):
        print(start + 1)
        return print_the_next_number(start + 1)
        print_the_next_number(5)

def print_the_next_number(start):
    print(start + 1)
    if start >= 7:
        return "I'm bored"
    return print_the_next_number(start + 1)
print_the_next_number(5)

def countdown(n):
    if n == 0:
        print('liftoff!')
    else:
        print(n)
        return countdown(n - 1)
countdown(3)

def factorial_iterative(n):
   result = 1
   for i in range(n):
     result *= i + 1
     return result

factorial_iterative(5)

def factorial_recursive(n):
        if n == 1:
          return 1
        else:
            return n * factorial_recursive(n - 1)

factorial_recursive(5)

stored_results = {}
def sum_to_n(n):
  result = 0

stored_results = {}
def sum_to_n(n):
    result = 0
    for i in reversed(range(n)):
        result += i + 1
    stored_results[n] = result
    return result

sum_to_n(5)

sum_to_n(6)

import time

stored_results = {}
def sum_to_n(n):
    start_time = time.perf_counter()
    result = 0
    for i in reversed(range(n)):
        if i + 1 in stored_results:
            print('Stopping sum at %s because we have previously computed it' % str(i + 1))
            result += stored_results[i + 1]
    else:
        result += i + 1
        stored_results[n] = result
        print(time.perf_counter() - start_time, "seconds")

sum_to_n(1000000)

sum_to_n(1000000)

import time
def do_things():
    start_time = time.perf_counter()
    for i in range(10):
      y = i ** 100
      print(time.perf_counter() - start_time, "seconds elapsed")
      x = 10**2
      print(time.perf_counter() - start_time, "seconds elapsed")
      return x
do_things()

import time
def print_time_elapsed(start_time):
    print(time.perf_counter() - start_time, "seconds elapsed")
def do_things():
    start_time = time.perf_counter()
    for i in range(10):
      y = i ** 100
      print_time_elapsed(start_time)
    x = 10**2
    print_time_elapsed(start_time)
    return x

def compute_usd_total(amount_in_aud=0, amount_in_gbp=0):
    total = 0
    total += amount_in_aud * 0.78
    total += amount_in_gbp * 1.29
    return total
print(compute_usd_total(amount_in_gbp=10))

def convert_currency(amount, rate, margin=0):
     return amount * rate * (1 + margin)

def compute_usd_total(amount_in_aud=0, amount_in_gbp=0):
    total = 0
    total += convert_currency(amount_in_aud, 0.78)
    total += convert_currency(amount_in_gbp, 1.29)
    return total

print(compute_usd_total(amount_in_gbp=10))

def compute_usd_total(amount_in_aud=0, amount_in_gbp=0):
    total = 0
    total += convert_currency(amount_in_aud, 0.78)
    total += convert_currency(amount_in_gbp, 1.29, 0.01)
    return total

print(compute_usd_total(amount_in_gbp=10))

x= 2
y= x
x= 4
print("x = " + str(x))

print("y = " + str(y))

x= 5
def do_things():
    print(x)
do_things()

def my_func():
  y= 5
  return 2
print(my_func())

y

x= 3
def my_func():
  x= 5
  print(x)
my_func()

score = 0
def update_score(new_score):
  score = new_score
update_score(100)
print(score)

score = 0
def update_score(new_score):
  global score
  score = new_score
print(score)

update_score(100)

print(score)

x= 4
def myfunc():
  x= 3
  def inner():
    nonlocal x
    print(x)
    inner()
myfunc()

lambda arguments : expression

def add_up(x, y):
    return x + y
print(add_up(2, 5))

first_item = lambda my_list: my_list[0]

first_item(['cat', 'dog', 'mouse'])

names = ['Magda', 'Jose', 'Anne']

lengths = []
for name in names:
    lengths.append(len(name))

lengths = list(map(len, names))

sum(lengths) / len(lengths)

import math

nums = [-3, -5, 1, 4]

list(map(lambda x: 1 / (1 + math.exp(-x)), nums))

names = ['Josefina', 'Jim', 'Kim']
list(filter(lambda name: len(name) == 3, names))
['Jim', 'Kim']

nums = list(range(1000))

filtered = filter(lambda x: x % 3 == 0 or x % 7 == 0, nums)

sum(filtered)

names = ['Ming', 'Jennifer', 'Andrew', 'Boris']
sorted(names, key=lambda x : len(x))

